generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  isAllowed Boolean  @default(true)
  verified  Boolean  @default(false)
  image     String?
  key       String?
  address   Address?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  contact   Contact?

  @@unique([id, email])
}

model GoogleUser {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  role      Role     @default(USER)
  isAllowed Boolean  @default(true)
  image     String?
  key       String?
  address   Address?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  contact   Contact?

  @@unique([id, email])
}

model FacebookUser {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  role      Role     @default(USER)
  isAllowed Boolean  @default(true)
  image     String?
  key       String?
  address   Address?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
  contact   Contact?

  @@unique([id, email])
}

model Contact {
  id    String  @id @default(uuid())
  phone String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  googleUser   GoogleUser? @relation(fields: [googleUserId], references: [id])
  googleUserId String?     @unique

  facebookUser   FacebookUser? @relation(fields: [facebookUserId], references: [id])
  facebookUserId String?       @unique
}

model Address {
  id      String  @id @default(uuid())
  street  String?
  city    String?
  state   String?
  country String?
  zip     String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  googleUser   GoogleUser? @relation(fields: [googleUserId], references: [id])
  googleUserId String?     @unique

  facebookUser   FacebookUser? @relation(fields: [facebookUserId], references: [id])
  facebookUserId String?       @unique
}

enum Role {
  USER
  ADMIN
}

model News {
  id           String    @id @default(uuid())
  title        String
  content      String
  published_at DateTime
  photos       String[]
  publisher    Publisher @relation(fields: [publisherId], references: [id])
  publisherId  Int

  @@index([title], name: "index_title")
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String
  contact String?
  news    News[]
}
